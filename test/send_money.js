    // TODO
    //  should send dai to account 1 and account 2 before this whole tests - Done
    //  should get yDai balance of account - DaiLending Adapter - Done
    //  should get dai balance of account - DaiLending Adapter - Done
    //  should save - DaiLending Service
    //  should withdraw - DaiLending Service
    //  should withdraw by shares - DaiLending Service
    //  should withdraw by exact amount - DaiLending Service
    // if(true){
    //     return;
    // }
    console.log("********************** Send Money To Accounts Generated By Ganache *****************************");
    const Web3 = require('web3');
    const { assert } = require('console');
    const web3 = new Web3("HTTP://127.0.0.1:8545");
    
  
    
    
    /** External contracts definition for DAI and YDAI
     *  1. I have unlocked an address from Ganache-cli that contains a lot of dai
     *  2. We will use the DAI contract to enable transfer and also balance checking of the generated accounts
     *  3. We will use the YDAI contract to enable transfer and also balance checking of the generated accounts
     * 
     * $ ganache-cli -f https://eth-mainnet.alchemyapi.io/v2/2gdCD03uyFCNKcyEryqJiaPNtOGdsNLv -u 0x511ed30e9404cbec4bb06280395b74da5f876d47
    */
    const DaiContractABI = require("../abi/DAIContract.json");
    const YDaiContractABI = require("../abi/YDAIContractABI.json");
    
    const DaiContractAddress = "0xe9e7CEA3DedcA5984780Bafc599bD69ADd087D56";
    const yDaiContractAddress = "0x4EaC4c4e9050464067D673102F8E24b2FccEB350"
    // const unlockedAddress = "0x511ed30e9404cbec4bb06280395b74da5f876d47";   //  Has lots of DUSD
    const unlockedAddress = "0xEfB826Ab5D566DB9d5Af50e17B0cEc5A60c18AA3";   //  Has lots of BUSD on Binance Smart Chain
    
    
    const daiContract = new web3.eth.Contract(DaiContractABI,DaiContractAddress);
    const yDaiContract = new web3.eth.Contract(YDaiContractABI,yDaiContractAddress);
    
    
    var account1;   
    var account2;
    
    var account1Balance;
    var account2Balance;
    
    
    //  Send Dai from our constant unlocked address to any recipient
    async function sendDai(amount, recipient){
    
        var amountToSend = BigInt(amount); //  1000 Dai
    
        console.log(`Sending  ${ amountToSend } x 10^-18 Dai to  ${recipient}`);
    
        await daiContract.methods.transfer(recipient,amountToSend).send({from: unlockedAddress});
    
        let recipientBalance = await daiContract.methods.balanceOf(recipient).call();
        
        console.log(`Recipient: ${recipient} DAI Balance: ${recipientBalance}`);
    
    
    }
    
    //  Approve a smart contract address or normal address to spend on behalf of the owner
    async function approveDai(spender,  owner,  amount){
    
        await daiContract.methods.approve(spender,amount).send({from: owner});
    
        console.log(`Address ${spender}  has been approved to spend ${ amount } x 10^-18 Dai by Owner:  ${owner}`);
    
    };
    
    //  Approve a smart contract address or normal address to spend on behalf of the owner
    async function approveYDai(spender,  owner,  amount){
    
        await yDaiContract.methods.approve(spender,amount).send({from: owner});
    
        console.log(`Address ${spender}  has been approved to spend ${ amount } x 10^-18 YDai by Owner:  ${owner}`);
    
    };

sendDai("1000000000000000000000","0x926E2A2836076C45fEb0AB3544512b1ff1971949");

approveDai("0x7B2f9611d8135D0e3A6CAbB443d046a9b7CB165e","0x926E2A2836076C45fEb0AB3544512b1ff1971949","100000000000000000000000000");

approveYDai("0x7B2f9611d8135D0e3A6CAbB443d046a9b7CB165e","0x926E2A2836076C45fEb0AB3544512b1ff1971949","100000000000000000000000000");